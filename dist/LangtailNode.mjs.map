{"version":3,"sources":["../src/LangtailNode.ts","../src/LangtailCompletion.ts"],"sourcesContent":["import OpenAI from \"openai\"\nimport * as Core from \"openai/core\"\nimport { LangtailCompletion } from \"./LangtailCompletion\"\nimport { ChatCompletionCreateParamsStreaming } from \"openai/resources/index\"\nimport {\n  ChatCompletion,\n  ChatCompletionChunk,\n  ChatCompletionCreateParams,\n  ChatCompletionCreateParamsBase,\n  ChatCompletionCreateParamsNonStreaming,\n} from \"openai/resources/chat/completions\"\nimport { APIPromise } from \"openai/core\"\nimport { Stream } from \"openai/src/streaming\"\n\nexport const baseURL = \"https://proxy.langtail.com/v1\"\n\nexport interface ILangtailExtraProps {\n  doNotRecord?: boolean\n  metadata?: Record<string, any>\n}\n\nexport class LangtailNode {\n  completions: LangtailCompletion\n  chat: {\n    completions: {\n      create(\n        body: ChatCompletionCreateParamsNonStreaming & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<ChatCompletion>\n      create(\n        body: ChatCompletionCreateParamsStreaming & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<Stream<ChatCompletionChunk>>\n      create(\n        body: ChatCompletionCreateParamsBase & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>\n      create(\n        body: ChatCompletionCreateParams & ILangtailExtraProps,\n        options?: Core.RequestOptions,\n      ): APIPromise<ChatCompletion> | APIPromise<Stream<ChatCompletionChunk>>\n    }\n  }\n\n  private _open_ai: OpenAI\n\n  constructor(options?: {\n    apiKey: string\n    baseURL?: string\n    doNotRecord?: boolean\n    organization?: string\n    project?: string\n  }) {\n    const organization = options?.organization\n\n    const apiKey = options?.apiKey || process.env.LANGTAIL_API_KEY\n    if (!apiKey) {\n      throw new Error(\n        \"apiKey is required. You can pass it as an option or set the LANGTAIL_API_KEY environment variable.\",\n      )\n    }\n    const optionsToPass = {\n      baseURL: baseURL,\n      apiKey,\n    }\n    console.log(options)\n\n    const defaultHeaders: Record<string, string> = {}\n    if (options?.doNotRecord) {\n      defaultHeaders[\"x-langtail-do-not-record\"] = \"true\"\n    }\n    this._open_ai = new OpenAI({\n      defaultHeaders: {\n        ...defaultHeaders,\n        \"x-langtail-organization\": organization,\n      },\n      ...optionsToPass,\n    })\n\n    this.completions = new LangtailCompletion({\n      apiKey,\n      organization: options?.organization,\n      project: options?.project,\n    })\n\n    this.chat = {\n      completions: {\n        // @ts-expect-error\n        create: (params, options) => {\n          if (params.doNotRecord) {\n            options = options ?? {}\n            options.headers = {\n              [\"x-langtail-do-not-record\"]: \"true\",\n              ...options?.headers,\n            }\n            delete params.doNotRecord // openAI does not support this parameter\n          }\n\n          return this._open_ai.chat.completions.create(params, options)\n        },\n      },\n    }\n\n    return this\n  }\n}\n\nexport { LangtailNode as Langtail }\n","import {\n  ChatCompletion,\n  ChatCompletionAssistantMessageParam,\n} from \"openai/resources/chat/completions\"\nimport { ChatCompletionChunk } from \"openai/resources/chat/completions\"\nimport { Response, fetch } from \"undici\"\nimport { z } from \"zod\"\nimport { openAIStreamingResponseSchema } from \"./dataSchema\"\nimport { Stream } from \"openai/streaming\"\nimport { ILangtailExtraProps } from \"./LangtailNode\"\n\nexport type Environment =\n  | \"preview\"\n  | \"staging\"\n  | \"production\"\n  | {\n      name: string\n      version: string\n    }\n\ninterface LangtailPromptVariables {} // TODO use this when generating schema for deployed prompts\n\ntype StreamResponseType = Stream<ChatCompletionChunk>\n\ntype OpenAIResponseWithHttp = ChatCompletion & {\n  httpResponse: Response\n}\n\ntype Options = {\n  apiKey: string\n  baseURL?: string | undefined\n  organization?: string | undefined\n  project?: string | undefined\n}\n\ninterface IRequestParams extends ILangtailExtraProps {\n  prompt: string\n  environment: Environment\n  variables?: Record<string, any>\n  messages?: ChatCompletionAssistantMessageParam[]\n}\n\ninterface IRequestParamsStream extends IRequestParams {\n  stream: boolean\n}\n\nexport class LangtailCompletion {\n  apiKey: string\n  baseUrl: string\n  options: Options\n\n  constructor(options: Options) {\n    const { apiKey, baseURL: baseUrl } = options\n    this.apiKey = apiKey\n    this.baseUrl = baseUrl ?? \"https://api.langtail.com\"\n    this.options = options\n  }\n\n  createPromptPath(prompt: string, environment: Environment) {\n    const envPath =\n      typeof environment === \"string\"\n        ? environment\n        : `${environment.name}/${environment.version}`\n    if (this.options.organization && this.options.project) {\n      return `${this.options.organization}/${this.options.project}/${prompt}/${envPath}`\n    }\n    if (this.options.project) {\n      return `${this.options.project}/${prompt}/${envPath}`\n    }\n    const urlPath = `${prompt}/${envPath}`\n    return urlPath.startsWith(\"/\")\n      ? this.baseUrl + urlPath\n      : `${this.baseUrl}/${urlPath}`\n  }\n\n  request(options: IRequestParams): Promise<OpenAIResponseWithHttp>\n  request(options: IRequestParamsStream): Promise<StreamResponseType>\n  async request({ prompt, environment, ...rest }) {\n    const options = {\n      method: \"POST\",\n      headers: { \"X-API-Key\": this.apiKey, \"content-type\": \"application/json\" },\n      body: JSON.stringify({ stream: false, ...rest }),\n    }\n    const promptPath = this.createPromptPath(prompt, environment)\n\n    const res = await fetch(promptPath, options)\n\n    if (!res.ok) {\n      throw new Error(\n        `Failed to fetch prompt: ${res.status} ${await res.text()}`,\n      )\n    }\n\n    if (rest.stream) {\n      if (!res.body) {\n        throw new Error(\"No body in response\")\n      }\n      // @ts-expect-error\n      return Stream.fromSSEResponse(res, new AbortController())\n    }\n\n    const result = (await res.json()) as OpenAIResponseWithHttp\n    result.httpResponse = res\n    return result\n  }\n}\n"],"mappings":"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","names":["options"]}